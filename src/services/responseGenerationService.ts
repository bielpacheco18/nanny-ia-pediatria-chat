
export class ResponseGenerationService {
  generateKnowledgeBasedResponse(userMessage: string, knowledgeBase: string): string {
    const lowerMessage = userMessage.toLowerCase();
    console.log('Generating knowledge-based response...');
    console.log('Knowledge base content length:', knowledgeBase?.length || 0);
    console.log('User message:', userMessage);
    
    if (!knowledgeBase || knowledgeBase.trim().length === 0) {
      return 'Ainda nÃ£o temos documentos pediÃ¡tricos na base de conhecimento. Por favor, adicione alguns materiais na seÃ§Ã£o "Base de Conhecimento" para que eu possa te ajudar melhor. ğŸ’œ';
    }

    // Limpar e processar o conteÃºdo da base de conhecimento
    const cleanedKnowledge = this.cleanKnowledgeBase(knowledgeBase);
    console.log('Cleaned knowledge base length:', cleanedKnowledge.length);

    // Extrair palavras-chave mais relevantes da pergunta
    const keywords = this.extractKeywords(lowerMessage);
    console.log('Keywords extracted:', keywords);
    
    // Buscar informaÃ§Ãµes relevantes baseadas nas palavras-chave
    const relevantInfo = this.findRelevantInformation(cleanedKnowledge, keywords);
    console.log('Relevant info found:', relevantInfo.length > 0);
    
    // Respostas para saudaÃ§Ãµes usando conhecimento geral
    if (this.isGreeting(lowerMessage)) {
      const generalInfo = this.extractGeneralPediatricInfo(cleanedKnowledge);
      return `OlÃ¡! Eu sou a Nanny, sua pediatra virtual! ğŸ’œ 

Estou aqui para te ajudar com qualquer dÃºvida sobre o cuidado do seu pequeno. Posso orientar sobre desenvolvimento infantil, alimentaÃ§Ã£o, sono, saÃºde e muito mais.

O que vocÃª gostaria de saber hoje?`;
    }
    
    // Se encontrou informaÃ§Ãµes relevantes, usar para responder
    if (relevantInfo.length > 0) {
      return this.generateNaturalResponse(userMessage, relevantInfo);
    }
    
    // Tentar busca mais ampla se nÃ£o encontrou nada especÃ­fico
    const broadInfo = this.findBroadInformation(cleanedKnowledge, lowerMessage);
    if (broadInfo) {
      return this.generateGeneralResponse(userMessage, broadInfo);
    }
    
    // Se nÃ£o encontrou nada especÃ­fico, dar resposta geral empÃ¡tica
    return this.generateFallbackResponse();
  }

  private cleanKnowledgeBase(knowledgeBase: string): string {
    // Remove tÃ­tulos e metadados, mantÃ©m apenas o conteÃºdo relevante
    return knowledgeBase
      .replace(/TÃ­tulo:.*?\n\n/g, '')
      .replace(/ConteÃºdo:\n/g, '')
      .replace(/---\n\n/g, '\n')
      .replace(/ConteÃºdo extraÃ­do do arquivo.*?:\s*/g, '')
      .replace(/Este Ã© um conteÃºdo simulado.*?\./g, '')
      .replace(/Em produÃ§Ã£o.*?\./g, '')
      .trim();
  }

  private extractKeywords(message: string): string[] {
    // Palavras-chave mais especÃ­ficas para pediatria
    const pediatricTerms = [
      'bebe', 'bebÃª', 'crianÃ§a', 'filho', 'filha', 'recÃ©m-nascido', 'newborn',
      'amament', 'leite', 'mama', 'peito', 'mamadeira',
      'sono', 'dormir', 'descanso', 'noite', 'acordar',
      'febre', 'temperatura', 'termÃ´metro', 'graus',
      'cÃ³lica', 'choro', 'chorar', 'desconforto', 'dor',
      'fralda', 'xixi', 'cocÃ´', 'intestino',
      'vacinaÃ§Ã£o', 'vacina', 'imunizaÃ§Ã£o',
      'desenvolvimento', 'crescimento', 'peso', 'altura',
      'alimentaÃ§Ã£o', 'comida', 'papinha', 'introduÃ§Ã£o',
      'dente', 'dentiÃ§Ã£o', 'mordedor',
      'banho', 'higiene', 'limpeza',
      'seguranÃ§a', 'acidente', 'prevenÃ§Ã£o',
      'mÃ©dico', 'pediatra', 'consulta'
    ];

    const words = message.toLowerCase().split(/\s+/);
    const relevantWords = words.filter(word => {
      return word.length > 2 && (
        pediatricTerms.some(term => word.includes(term) || term.includes(word))
      );
    });

    // Adicionar palavras maiores que podem ser relevantes
    const longerWords = words.filter(word => word.length > 4);
    
    return [...new Set([...relevantWords, ...longerWords])];
  }

  private isGreeting(message: string): boolean {
    const greetings = ['oi', 'olÃ¡', 'hello', 'hi', 'bom dia', 'boa tarde', 'boa noite'];
    return greetings.some(greeting => message.includes(greeting)) || message.length < 10;
  }

  private findRelevantInformation(knowledge: string, keywords: string[]): string[] {
    if (keywords.length === 0) return [];

    const sentences = knowledge.split(/[.!?]+/).filter(sentence => sentence.trim().length > 20);
    const relevantSentences: string[] = [];

    keywords.forEach(keyword => {
      const matchingSentences = sentences.filter(sentence => {
        const sentenceLower = sentence.toLowerCase();
        return sentenceLower.includes(keyword.toLowerCase());
      });
      relevantSentences.push(...matchingSentences);
    });

    // Remover duplicatas e pegar as melhores
    const uniqueSentences = [...new Set(relevantSentences)];
    return uniqueSentences.slice(0, 3);
  }

  private findBroadInformation(knowledge: string, message: string): string {
    const topics = {
      'alimentaÃ§Ã£o': ['aliment', 'comer', 'comida', 'leite', 'papinha'],
      'sono': ['sono', 'dormir', 'descanso', 'noite'],
      'saÃºde': ['saÃºde', 'doenÃ§a', 'sintoma', 'febre', 'tosse'],
      'desenvolvimento': ['desenvolviment', 'cresciment', 'marcos', 'habilidade'],
      'cuidados': ['cuidado', 'higiene', 'banho', 'fralda']
    };

    for (const [topic, terms] of Object.entries(topics)) {
      if (terms.some(term => message.includes(term))) {
        const topicInfo = this.findTopicInformation(knowledge, terms);
        if (topicInfo) return topicInfo;
      }
    }

    return '';
  }

  private findTopicInformation(knowledge: string, terms: string[]): string {
    const sentences = knowledge.split(/[.!?]+/).filter(sentence => sentence.trim().length > 20);
    const topicSentences = sentences.filter(sentence => {
      const sentenceLower = sentence.toLowerCase();
      return terms.some(term => sentenceLower.includes(term));
    });

    return topicSentences.slice(0, 2).join('. ').trim();
  }

  private extractGeneralPediatricInfo(knowledge: string): string {
    const sentences = knowledge.split(/[.!?]+/).filter(sentence => {
      const clean = sentence.trim();
      return clean.length > 30 && !clean.toLowerCase().includes('simulado');
    });

    return sentences.slice(0, 1).join('. ').trim();
  }

  private generateNaturalResponse(userMessage: string, relevantInfo: string[]): string {
    const info = relevantInfo.join('. ').trim();
    
    // Resposta personalizada baseada no tipo de pergunta
    if (userMessage.toLowerCase().includes('febre')) {
      return `${info}.

Febre em bebÃªs pode ser preocupante, mas respira comigo - vocÃª estÃ¡ cuidando bem do seu pequeno. Mantenha a calma e monitore a temperatura. Se persistir ou vocÃª notar outros sintomas, sempre consulte seu pediatra. ğŸ’œ`;
    }

    if (userMessage.toLowerCase().includes('amament') || userMessage.toLowerCase().includes('leite')) {
      return `${info}.

A amamentaÃ§Ã£o Ã© uma jornada Ãºnica para cada mamÃ£e e bebÃª. Isso nÃ£o Ã© frescura - vocÃª estÃ¡ fazendo o melhor para seu pequeno! Se tiver dificuldades, procure apoio e lembre-se: vocÃª Ã© mais forte do que imagina. ğŸ’œ`;
    }

    if (userMessage.toLowerCase().includes('sono') || userMessage.toLowerCase().includes('dormir')) {
      return `${info}.

QuestÃµes de sono sÃ£o muito comuns nos primeiros meses. Respira comigo - essa fase passa e vocÃªs vÃ£o encontrar o ritmo de vocÃªs. Cada bebÃª tem seu tempo, e vocÃª estÃ¡ fazendo um trabalho incrÃ­vel! ğŸ’œ`;
    }

    if (userMessage.toLowerCase().includes('choro') || userMessage.toLowerCase().includes('cÃ³lica')) {
      return `${info}.

O choro do bebÃª pode ser angustiante, mas vamos juntas descobrir o que pode estar incomodando seu pequeno. VocÃª conhece seu bebÃª melhor que ninguÃ©m, confie no seu instinto maternal. ğŸ’œ`;
    }

    // Resposta geral empÃ¡tica
    return `${info}.

Lembre-se que cada bebÃª Ã© Ãºnico e se desenvolve no seu prÃ³prio ritmo. VocÃª estÃ¡ fazendo um trabalho maravilhoso como mÃ£e! Para orientaÃ§Ãµes especÃ­ficas sobre seu pequeno, sempre consulte seu pediatra de confianÃ§a. ğŸ’œ`;
  }

  private generateGeneralResponse(userMessage: string, info: string): string {
    return `${info}.

Para te dar uma orientaÃ§Ã£o mais especÃ­fica sobre seu bebÃª, seria importante conhecer mais detalhes da situaÃ§Ã£o. Cada crianÃ§a Ã© especial e merece cuidado personalizado. 

Pode me contar mais sobre o que estÃ¡ te preocupando? Estou aqui para te apoiar nessa jornada! ğŸ’œ`;
  }

  private generateFallbackResponse(): string {
    return `Vejo que vocÃª tem uma dÃºvida importante sobre seu pequeno. Embora eu tenha conhecimento em pediatria, para te dar a melhor orientaÃ§Ã£o possÃ­vel, seria Ã³timo se vocÃª pudesse ser mais especÃ­fica sobre sua preocupaÃ§Ã£o.

Como mÃ£e, vocÃª conhece seu bebÃª melhor que ninguÃ©m. Confie no seu instinto e, para questÃµes especÃ­ficas, sempre consulte seu pediatra de confianÃ§a.

O que exatamente estÃ¡ te preocupando hoje? Estou aqui para te apoiar! ğŸ’œ`;
  }

  createSystemPrompt(knowledgeBase: string): string {
    const cleanedKnowledge = this.cleanKnowledgeBase(knowledgeBase);
    
    return `VocÃª Ã© a Nanny, uma pediatra virtual acolhedora e empÃ¡tica especializada em cuidados infantis. 

PERSONA: VocÃª Ã© calorosa, compreensiva e sempre valida os sentimentos dos pais. Use expressÃµes como "Respira comigo", "Isso nÃ£o Ã© frescura", "Vamos juntas descobrir". Seja tÃ©cnica quando necessÃ¡rio, mas sempre de forma acessÃ­vel e empÃ¡tica.

CONHECIMENTO MÃ‰DICO:
${cleanedKnowledge}

INSTRUÃ‡Ã•ES IMPORTANTES:
- Use as informaÃ§Ãµes mÃ©dicas fornecidas como base para suas respostas
- Responda de forma natural, como se fosse seu conhecimento mÃ©dico prÃ³prio
- NUNCA mencione "base de conhecimento", "documentos", "PDFs", "materiais" ou "com base em"
- Seja empÃ¡tica e acolhedora no tom
- Se a informaÃ§Ã£o especÃ­fica nÃ£o estiver disponÃ­vel, seja honesta e peÃ§a mais detalhes
- Para emergÃªncias, sempre oriente a procurar ajuda mÃ©dica imediata
- Lembre que vocÃª Ã© um apoio educativo, nÃ£o substitui consulta mÃ©dica

Responda sempre com carinho e profissionalismo, como uma pediatra experiente e acolhedora.`;
  }
}
