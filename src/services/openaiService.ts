
import { supabase } from '@/integrations/supabase/client';

export interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export class OpenAIService {
  private apiKey: string | null = null;

  constructor() {
    // Debug log to check environment
    console.log('Checking environment variables...');
    console.log('import.meta.env:', import.meta.env);
    
    // Em Vite, use import.meta.env ao inv√©s de process.env
    try {
      this.apiKey = import.meta.env.VITE_OPENAI_API_KEY || null;
      console.log('API Key loaded:', this.apiKey ? 'Yes (hidden)' : 'No');
    } catch (error) {
      console.error('Error accessing environment variable:', error);
      this.apiKey = null;
    }
  }

  setApiKey(key: string) {
    this.apiKey = key;
  }

  async getKnowledgeBaseFromSupabase(): Promise<string> {
    try {
      console.log('Fetching knowledge base from Supabase...');
      const { data: knowledgeBase, error } = await supabase
        .from('knowledge_base')
        .select('title, content')
        .eq('status', 'processed');

      if (error) {
        console.error('Error fetching knowledge base:', error);
        return '';
      }

      console.log('Knowledge base data:', knowledgeBase);
      console.log('Number of documents found:', knowledgeBase?.length || 0);

      if (!knowledgeBase || knowledgeBase.length === 0) {
        console.log('No processed documents found in knowledge base');
        return '';
      }

      const combinedContent = knowledgeBase
        .filter(item => item.content && item.content.trim().length > 0)
        .map(item => `T√≠tulo: ${item.title}\n\nConte√∫do:\n${item.content}`)
        .join('\n\n---\n\n');

      console.log('Combined content length:', combinedContent.length);
      return combinedContent;
    } catch (error) {
      console.error('Error accessing Supabase:', error);
      return '';
    }
  }

  async generateResponse(userMessage: string, conversationHistory: ChatMessage[] = []): Promise<string> {
    console.log('Generating response for:', userMessage);
    
    // Buscar base de conhecimento primeiro
    const knowledgeBase = await this.getKnowledgeBaseFromSupabase();
    console.log('Knowledge base available:', knowledgeBase.length > 0);
    
    // Se n√£o h√° chave da API, usar respostas baseadas na base de conhecimento
    if (!this.apiKey) {
      console.log('Using knowledge-based response - no API key');
      return this.generateKnowledgeBasedResponse(userMessage, knowledgeBase);
    }

    try {
      const systemPrompt = `Voc√™ √© a Nanny, uma pediatra virtual acolhedora e emp√°tica especializada em cuidados infantis. 

PERSONA: Voc√™ √© calorosa, compreensiva e sempre valida os sentimentos dos pais. Use express√µes como "Respira comigo", "Isso n√£o √© frescura", "Vamos juntas descobrir". Seja t√©cnica quando necess√°rio, mas sempre de forma acess√≠vel.

IMPORTANTE: Baseie suas respostas EXCLUSIVAMENTE nas informa√ß√µes m√©dicas e pedi√°tricas fornecidas abaixo. Se a informa√ß√£o espec√≠fica n√£o estiver dispon√≠vel no conte√∫do fornecido, diga que precisa de mais informa√ß√µes para dar uma orienta√ß√£o espec√≠fica.

BASE DE CONHECIMENTO M√âDICO:
${knowledgeBase}

INSTRU√á√ïES IMPORTANTES:
- Responda APENAS com base nas informa√ß√µes m√©dicas fornecidas acima
- NUNCA mencione "base de conhecimento", "documentos", "materiais" ou "PDFs" em suas respostas
- Responda como se fosse seu conhecimento m√©dico natural e experi√™ncia como pediatra
- Se a informa√ß√£o espec√≠fica n√£o estiver dispon√≠vel no conte√∫do m√©dico fornecido, seja honesta e diga que precisa de mais detalhes
- Seja emp√°tica e acolhedora no tom
- Mantenha o foco em orienta√ß√µes pedi√°tricas baseadas no conte√∫do m√©dico dispon√≠vel
- Se for uma emerg√™ncia, sempre oriente a procurar ajuda m√©dica imediata
- Use o conte√∫do m√©dico fornecido para dar respostas espec√≠ficas e detalhadas

LEMBRETE: Voc√™ √© um apoio educativo baseado em conhecimento m√©dico espec√≠fico. Em casos s√©rios ou emerg√™ncias, sempre oriente a buscar um pediatra presencialmente.`;

      const messages: ChatMessage[] = [
        { role: 'system', content: systemPrompt },
        ...conversationHistory.slice(-6), // Manter apenas as √∫ltimas 6 mensagens para contexto
        { role: 'user', content: userMessage }
      ];

      console.log('Sending request to OpenAI...');
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: messages,
          temperature: 0.7,
          max_tokens: 800,
        }),
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content || 'Desculpe, n√£o consegui gerar uma resposta no momento.';
      console.log('OpenAI response received');
      return aiResponse;
    } catch (error) {
      console.error('Erro ao chamar OpenAI:', error);
      return this.generateKnowledgeBasedResponse(userMessage, knowledgeBase);
    }
  }

  private async generateKnowledgeBasedResponse(userMessage: string, knowledgeBase: string): Promise<string> {
    const lowerMessage = userMessage.toLowerCase();
    console.log('Generating knowledge-based response...');
    console.log('Knowledge base content length:', knowledgeBase?.length || 0);
    console.log('User message:', userMessage);
    
    // Se h√° base de conhecimento, procurar informa√ß√µes relevantes
    if (knowledgeBase && knowledgeBase.trim().length > 0) {
      console.log('Using knowledge base for response');
      
      // Buscar por palavras-chave na base de conhecimento
      const knowledgeWords = knowledgeBase.toLowerCase();
      
      // Extrair palavras-chave da pergunta do usu√°rio
      const keywords = lowerMessage.split(' ').filter(word => word.length > 3);
      console.log('Keywords found:', keywords);
      
      // Verificar se alguma palavra-chave est√° presente na base de conhecimento
      const relevantInfo = keywords.some(keyword => knowledgeWords.includes(keyword));
      console.log('Relevant info found in knowledge base:', relevantInfo);
      
      if (relevantInfo) {
        // Tentar encontrar se√ß√µes relevantes da base de conhecimento
        const sentences = knowledgeBase.split(/[.!?]+/).filter(sentence => sentence.trim().length > 20);
        const relevantSentences = sentences.filter(sentence => {
          const sentenceLower = sentence.toLowerCase();
          return keywords.some(keyword => sentenceLower.includes(keyword));
        });
        
        console.log('Relevant sentences found:', relevantSentences.length);
        
        if (relevantSentences.length > 0) {
          // Usar as informa√ß√µes relevantes para construir uma resposta
          const info = relevantSentences.slice(0, 3).join('. ').trim();
          return `Com base no meu conhecimento m√©dico: ${info}. Lembre-se que cada crian√ßa √© √∫nica e pode ter varia√ß√µes. Se tiver d√∫vidas espec√≠ficas sobre seu pequeno, sempre consulte seu pediatra de confian√ßa. Voc√™ est√° fazendo um √≥timo trabalho! üíú`;
        }
      }
      
      // Respostas espec√≠ficas baseadas no conhecimento dispon√≠vel
      if (lowerMessage.includes('febre')) {
        const feverInfo = knowledgeBase.toLowerCase().includes('febre') ? 
          knowledgeBase.split(/[.!?]+/).filter(s => s.toLowerCase().includes('febre')).slice(0, 2).join('. ') : '';
        if (feverInfo) {
          return `Sobre febre infantil: ${feverInfo}. Respira comigo - voc√™ est√° cuidando bem do seu beb√™. Para orienta√ß√µes espec√≠ficas sobre o seu caso, consulte seu pediatra.`;
        }
      }
      
      if (lowerMessage.includes('amament') || lowerMessage.includes('leite')) {
        const breastfeedingInfo = knowledgeBase.toLowerCase().includes('amament') ? 
          knowledgeBase.split(/[.!?]+/).filter(s => s.toLowerCase().includes('amament')).slice(0, 2).join('. ') : '';
        if (breastfeedingInfo) {
          return `Sobre amamenta√ß√£o: ${breastfeedingInfo}. Isso n√£o √© frescura - voc√™ est√° fazendo o melhor para seu pequeno! üíú`;
        }
      }
      
      if (lowerMessage.includes('sono') || lowerMessage.includes('dormir')) {
        const sleepInfo = knowledgeBase.toLowerCase().includes('sono') ? 
          knowledgeBase.split(/[.!?]+/).filter(s => s.toLowerCase().includes('sono')).slice(0, 2).join('. ') : '';
        if (sleepInfo) {
          return `Sobre o sono dos beb√™s: ${sleepInfo}. Respira comigo - essa fase passa e voc√™s v√£o encontrar o equil√≠brio. üíú`;
        }
      }
      
      // Resposta geral quando h√° base de conhecimento mas n√£o √© espec√≠fica
      const generalInfo = knowledgeBase.split(/[.!?]+/).slice(0, 2).join('. ').trim();
      return `Com base no meu conhecimento pedi√°trico: ${generalInfo}. Para te dar uma orienta√ß√£o mais precisa e personalizada para seu beb√™, seria importante conversar sobre mais detalhes da situa√ß√£o. Cada crian√ßa √© √∫nica e merece cuidado individualizado. Voc√™ est√° fazendo um trabalho incr√≠vel! üíú`;
    }
    
    // Se n√£o h√° base de conhecimento, resposta padr√£o
    console.log('No knowledge base available, using default response');
    if (lowerMessage.includes('ol√°') || lowerMessage.includes('oi') || lowerMessage.includes('hello')) {
      return 'Ol√°! Eu sou a Nanny, sua pediatra virtual. Estou aqui para te ajudar com quest√µes sobre cuidados infantis baseado no conhecimento m√©dico dispon√≠vel. Como posso te apoiar hoje? üíú';
    }
    
    return 'Ainda n√£o tenho informa√ß√µes m√©dicas suficientes para responder de forma espec√≠fica a essa quest√£o. Te encorajo a adicionar materiais pedi√°tricos na se√ß√£o "Base de Conhecimento" para que eu possa te ajudar melhor com conhecimento m√©dico especializado. Para quest√µes urgentes, sempre consulte seu pediatra. Voc√™ est√° fazendo um √≥timo trabalho! üíú';
  }
}
